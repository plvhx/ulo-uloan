# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import bound_pb2 as bound__pb2


class BoundStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetBound = channel.unary_unary(
        '/inventory.Bound/GetBound',
        request_serializer=bound__pb2.BoundRequest.SerializeToString,
        response_deserializer=bound__pb2.BoundResponse.FromString,
        )
    self.GetBounds = channel.unary_stream(
        '/inventory.Bound/GetBounds',
        request_serializer=bound__pb2.BoundRequest.SerializeToString,
        response_deserializer=bound__pb2.BoundResponse.FromString,
        )


class BoundServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetBound(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetBounds(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BoundServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetBound': grpc.unary_unary_rpc_method_handler(
          servicer.GetBound,
          request_deserializer=bound__pb2.BoundRequest.FromString,
          response_serializer=bound__pb2.BoundResponse.SerializeToString,
      ),
      'GetBounds': grpc.unary_stream_rpc_method_handler(
          servicer.GetBounds,
          request_deserializer=bound__pb2.BoundRequest.FromString,
          response_serializer=bound__pb2.BoundResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'inventory.Bound', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
